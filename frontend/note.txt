路由与导航
    基本路由
    子路由
    辅助路由
    路由守卫[canActivate, canDeactivate]
    resolve 路由

依赖注入
    什么是依赖注入(侧重于手段)
        类本身不创建对象, 由外部容器创建对象注入到本类中
    什么是控制反转(侧重与描述)(与依赖注入是一个思想)
        类本身不创建对象, 由外部容器创建对象注入到本类中
        这样对象的控制权就转移到了外部
    好处
        松耦合, 提高重用性

    Code
        /*
          两种写法功能是一样的
          providers: [ProductService]
          providers: [{provide: ProductService, useClass: AnotherProductService}]

          constructor(private productService: ProductService) {}
          // 1.从 providers 获取对应的 token (provide: ProductService)
          // 2.实例化 对应的对象 (useClass: AnotherProductService)
        */

    提供器的层级关系
        应用级提供器(模块中的 providers)
        组件级提供器(组件中的 providers)
        子组件级提供器

    组件获取提供器的顺序
        自身的 providers 中获取
        父组件的 providers 中获取
        应用级的 providers 中获取
            Injectable 装饰器会存储到应用级的 providers 中
            module 的 providers 会覆盖 Injectable 装饰器

        上面三层都没有获取到抛异常

数据绑定 响应式编程 管道
  数据绑定
    双大括号, 绑定元素的内容
    方括号, 绑定元素的标签
    小括号, 绑定元素的事件
        <input (change)="methodName($event)">
            change: 事件名称
            methodName: 组件的方法名称
        <button (click)="flag = false">

    DOM 属性和 HTML 属性的区别, 数据绑定绑定的是 DOM 属性
      DOM 属性, DOM 元素的属性
      HTML 属性, DOM 元素的 HTML 标签属性

  响应式编程
    const subscription = of(1, 2, 3, 4, 5)
      .pipe(
        filter(n => n % 2 === 0),
        map(n => n * n)
      )
      .subscribe({
        next: x => console.log(x),
        error: err => console.error(err),
        complete: () => console.log('ok')
      });

    - 可观察对象, 表示一组值或者事件的集合
      1, 2, 3, 4, 5
    - 观察者, 一个回调函数的集合, 他知道怎么样去监听 Observable 发送的值
      pipe
    - 观察对象, 表示一个观察对象, 用于取消观察
      subscription
    - 操作符, 纯粹的函数, 可以用函数是编程来处理集合
      filter
      map

  管道
    用于过滤数据

组件之间通讯
  组件输入输出属性
    父组件向子组件传参
      子组件声明 @Input 装饰器
      父组件通过 [] 表达式传入
    子组件向父组件传参
      父组件通过 () 订阅
      子组件通过 EventEmitter 发布

  中间人模式传递数据
    两个组件之间通信
    通过一个组件来传递两者通信的信息(这个组件称之为中间人组件)

  组件间通讯的小结
    - 父子组件之间应该避免直接访问彼此的内部，而应该通过输入(@Input)输出(@Output)属性来通讯
    - 组件可以通过输出(@Output)属性来触发自定义事件(EventEmitter)
    - 在没有父子关系的组件之间，尽量使用中间人模式进行通讯
    - 父组件可以投影一个或多个模板片段到子组件中
    - 每个组件都提供了一组生命周期钩子
    - angular 的变更检测机制会检测组件的属性并且自动更新视图，这个检测非常的频繁，避免将大量运算的代码交给变更检测方法

  组件生命周期以及数据发生变化的机制
    生命周期
      // 绑定输入属性之前调用
      // 只有声明了 @Input 装饰器才会被调用
      // [重复调用]每次输入属性的内存地址发生变化都会被调用
      ngOnChanges

      // [只调用一次] ngOnChanges 第一轮调用后调用
      ngOnInit

      // [重复调用]每当数据发生改变都会被调用
      ngDoCheck

      // [只调用一次]内容投影初始化完成(如果由子组件, 会调用子组件的此方法)
      ngAfterContentInit()

      // [重复调用]内容投影更新完成(如果由子组件, 会调用子组件的此方法)
      ngAfterContentChecked()

      // [只调用一次]视图初始化完成后被调用
      ngAfterViewInit()

      // [重复调用]视图更新完成后被调用
      ngAfterViewChecked()

      // [只调用一次]Angular 指令/组件销毁后被调用 (路由跳转会触发)
      ngOnDestroy()

    ng-content
      投影 Vue 中的 slot, React 中的 this.props.children

表单处理
  模版表单和响应式表单都依赖于 FormsModel, ReactiveFormsModel

  模版表单, 指令以 ng 起点, 只能在模版中操作表单, 不能在代码中
    ngForm 会实例 FormGroup
      <form #myForm="ngForm"></form>

    ngModel 会实例 FormControl
      <input name="username" ngModel>

    ngModelGroup 会实例 FormGroup
      <div ngModelGroup="userInfo">
        <input name="username" ngModel>
        <input name="password" ngModel>
      </div>

  响应式表单, 指令以 form 起点, 只能在代码中操作表单, 不能在模版中
    FormControl 对象, 创建一个响应式的表单
    FormGroup 对象多个 FormControl 的集合
    FormArray 对象可变长度的 FormGroup

    指令
      formGroup - 绑定属性
      formGroupName - 普通字符串
      formControlName - 普通字符串
      formArrayName - 普通字符串

  表单的验证
    Angular 校验器
      Validators

    响应式表单校验
      通过fb.group 的 参数传入
        ['', [Validators.required, Validators.minLength(5)]]

    状态的字段
      touched, 已获取过焦点为 true
      untouched, 未获取过焦点为 true
      pristine, 值没有被给修改过
      dirty, 值已经被修改过
      pending, 异步

    指令
      生成一个指令 ng g directive qqqDirective

与服务端通讯
  创建 Web 服务器

  Http 通讯

  WebSocket 通讯

构建与部署
